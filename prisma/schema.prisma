// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  SELLER
  ADMIN
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  firstName String?
  lastName  String?
  phone     String?
  street    String?
  city      String?
  zip       String?
  country   String?

  profilePicture String? // Optional
  status         String?   @default("ACTIVE") // Optional
  dateOfBirth    DateTime? // Optional
  language       String? // Optional
  currency       String? // Optional
  isVerified     Boolean   @default(false) // Optional

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role    @default(CLIENT)
  orders Order[]
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  price       Float
  stock       Int
  description String
  categoryId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category?   @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[] // One-to-many relationship with OrderItem
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  totalAmount Float
  status      String // e.g., "pending", "shipped", "delivered"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[] // One-to-many relationship with OrderItem
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float // Price at the time of purchase
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] // One-to-many relationship with Product
}
